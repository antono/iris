---------------------------------------------------------------------------
Known bugs
---------------------------------------------------------------------------

* The scheduling is very dumb, especially for processes. This makes some
  of the tests run pretty slowly too.

* Tutorial and README are unfinished/out of date.

* tests/task-1 leaks mock schedulers like it's going out of fashion. Better
  maybe to provide iris_set_default_*_scheduler(NULL) which returns to the
  real default. Or not use set_default, which might be better still !
  It's a shame we don't have floating refs on schedulers but it doesn't
  really make sense .. just have to use fixtures.

---------------------------------------------------------------------------
Missing or Incompleteness
---------------------------------------------------------------------------

info-bar: size-group for titles? This would make examples/progress-groups prettier

General test improvements needed:
  * Tests should always use a fresh scheduler
  * Add libtestutils and factor out some of the tests' shared code

Bring wscript up to the same standard as the autotools build system

You should add progress monitor support for tasks and processes that have thrown
fatal errors as well ...

The IrisProgressMonitor examples could perhaps be described using a couple of
screenshots.
To do this in gtk-doc you do:
  <inlinegraphic fileref="gnome-foo.png" format="PNG" />
then add the file in doc/makefile.am:
  HTML_IMAGES= \
          $(srcdir)/images/gnome-foo.png

When I added the 'closed' API I broke IrisLFQueue and IrisWSQueue :( While
there, they each have their own unit tests which duplicate some code, we
could make a shared test.

We are not currently destroying threads ever. After they are created they
stay created until the end of the process. We need to find a way to
periodically walk the free-list to shutdown old threads.

IrisMessage. 

	I don't like the fact that it's not threadsafe. There's really two options:
	- make it immutable: this would make creation kind of annoying, and make it
	  a pain to pass on a modified message. On the plus side, we could rebase
	  the code on top of gvariant and make it slightly simpler.
	- add locking. We ideally need reads to be really fast, although they do
	  already involve a hash table lookup I suppose.

IrisPort

	It might be cool to add a 'closed' state to ports. On
	iris_receiver_destroy() the owner would know not to send any more messages.
	In particular, in _iris_progress_watch_disconnect(), the task/process has no
	way of knowing the watch is no longer watching currently. That said, we
	could send a REMOVE_WATCH message to the task/process which would have the
	same effect. An alternative approach would be to make it an error to post to
	a port once its receiver has been destroyed (this is probably too strict
	though).

	You should not be allowed to attach arbiters to receivers that have already
	passed a message, because they could get into weird inconsistent states.
	However, we currently allow 'live' port/receiver connections and
	disconnections. The main use seems to be 'single-shot' receivers, but to
	be honest I can't work out what these are for. Perhaps it would be better
	to remove them, and make it so ports and receivers can only be connected
	before calls to iris_port_post() as well - before the communication channel
	becomes active.

IrisScheduler

	iris_scheduler_foreach () is a big bunch of code that should be a lot
	neater.

	The connection between scheduler and scheduler-manager is inconsistent at
	the moment. Threads request help from the scheduler, and yield themselves to
	the scheduler manager when free. Schedulers, when freed, free their threads
	which give themselves to the scheduler manager. However, scheduler init goes
	against this pattern and it calls iris_scheduler_manager_prepare() to ask it
	to assign it some threads. We also have unprepare() which is currently
	useless. I think it would be better to have the scheduler initialisation
	request the threads FROM the scheduler manager. While there, fix the
	potential synchronisation bug that the mutex is not locked in
	iris_scheduler_add_thread() when the thread is added.

IrisTask
	I think tasks & processes should gain a state system. The flags are really
	doing this anyway, it would make atomic changes a lot easier and remove
	some flags, and make the internals easier to understand. I see tasks having
	4 phases: creation, work execution, callbacks, finished. Processes have the
	preparation stage where work is enqueued, but this must be separate because
	it can be going on while the process is actually executing.

	Atomic access to variables in iristask is poor at best.

	Why are callbacks/errbacks not using gsignal?
	- chergert suggested adding a ::state-changed signal, which would make
	  neater code than ::cancelled, ::completed, ::succeeded, ::failed
	- how many people actually need to connect to all those signals and do
	  something complicated? The upside of them is the code is far more intuitive

	Some things that are probably useless:
	  * iris_task_remove_dependency(), I can't think of a convincing use case
	    which can't be solved by just not adding the dependency

	Raising a fatal error in a task should imply iris_task_work_finished(),
	logically. This would mean renaming that function to
	iris_task_work_succeeded() too.

IrisProcess

	Add a couple of examples - show how to implement map and reduce with
	process perhaps.

	Currently IrisProcess is really, really dumb and inefficient (especially when
	idle). The current system is to see if there is any work using try_pop() and if
	not, re-enqueue the process back into the scheduler to check again immediately.
	We also yield to the scheduler in this way occasionally based on time to allow
	the scheduler to decide if it wants to add more threads, etc. This is good for
	now because the scheduler does not get as blocked up but is very wasteful
	when processes are waiting around.

	Things to consider:
	  - we could create an IrisProcessScheduler, which could peek into queues
	    and not execute a work function for processes with no work, saving on
	    having a thread blocking on the queue.  This falls down on the fact
	    that only Windows can block on multiple conds at once in one thread, I
	    think. Unless we create a special queue where they all signal one cond
	    to wake up the scheduler's main thread, this might be a no go

	  - is one thread per process a reasonable assumption? if the process runs
	    IO-bound items, it really wants as many threads as are available within
	    reason, and certainly sharing threads would not make sense. For CPU
	    bound processes there is no reason to run more threads than there are
	    cores, but a dedicated thread is still good perhaps to improve
	    multitasking. The only time a process would not need its own dedicated
	    thread is if it spends most of its time waiting for work, but is that a
	    common use-case? The whole point of process is that it's stuff that
	    takes a long time to process, if we have more occasional single-shot
	    work then IrisTask, maybe wrapped by some IrisService, is a better fit.
	
	So the possible models:
	  1. no dedicated threads, work items pulled from the process and scheduled
	     by IrisProcessScheduler => silly for IO-bound processes
	  2. one dedicated thread which passes work off into others when need be
	     (exactly how IrisThread works in fact - can we not take advantage of
	     that?) => good for CPU and IO-bound processes
	  3. multiple dedicated threads all running through the work queue
	     => good for IO bound processes

	It seems like 2 is the most flexible and most suited to IrisProcess. How
	to implement it?
	  - customise IrisThread and run it as IrisProcessThread? In which case
	    each IrisProcess would act like a subclass of IrisScheduler.
	  - create IrisProcessScheduler which handles all processes, but still runs
	    each one in its own IrisProcessThread. I like this option better because
	    the scheduler can then distribute threads etc. But this becomes just a
	    needless deputy of IrisSchedulerManager.
	  - IrisSchedulerManager could be extended to sensibly manage IrisProcessScheduler
	    and IrisScheduler together. The former is expected to be running
	    full-throttle, although the scheduler needs to know if it is waiting on
	    CPU time (in which case threads > cores is pointless) or IO (in which
	    case more threads = better, to a point). Either the user could tell it,
	    or it could experiment by adding one extra thread and seeing if work
	    goes 2x as fast or the same speed. A sort of
	    iris_task_set_performance_hint() taking IRIS_CPU_BOUND or IRIS_IO_BOUND
	    ... would this be useful for tasks as well? Yes, it makes no sense
	    scheduling a CPU bound task when one is already running ... I think
	    tasks and processes should run in together in the special scheduler,
	    so that (a) main one can be free for message delivery, and (b) we can
	    do 'joined-up thinking' like this ... or move that control to the
	    scheduler manager??? I don't know :(

	A quick fix might be to allow setting a process on a thread, so it can
	work out what to do a bit better .. 

	Should we use IrisWSScheduler? I guess it can't hurt, although it shouldn't
	be too much of an improvement just because process threads should mostly
	have their own work to do. Not a priority.

	Is it possible to maintain IrisProcess as a subclass of IrisTask in all
	this ?

	What about errors in processes? There are two possibilites -
	  1. a fatal error prevents further work and can be handled as an iristask error
	  2. a per-item error means one work item can't be processed. What would you do
		 about this ? an example is eg. file not found in a list of files to process.
		 Can you store all of the errors and pass them back as GErrors? Or you could
		 use some custom mechanism ...
	Make sure that if a chained process throws a fatal error the remaining process also
	stop..

IrisStack

	What's this useful for? Why make it public?

Progress widgets

	The progress monitor widgets should make sure that they do not expand to
	comical sizes, groups should be collapsed and scroll bars added etc.

	The 'plural' parameter, which currently does nothing, is intended to merge
	similar groups to save space, eg. importing 6 directories could each have
	the plural "Importing files" so on their own they display as "Importing
	/home/foo/bar" but when space becomes short they are collapsed to "Importing
	files" rather than showing 6 collapsed processes/groups. Remember to update
	all the docs in iris-progress-monitor.c when you implement this!

	It would be faster to only update progress monitor labels/title bars
	when the string has changed; only relevent with %-ages and even then
	probably not a massive improvement

	A useful addition might be a simple IrisProgressBar, which would watch a process,
	group, task etc. and could just be embedded in an app's status bar or main window.

	One thing we could do is give progress watches a textual status. So it
	starts as "Preparing ..." and then goes NULL so the "1 item of 166" comes
	in to play. But (and this stuff is most useful in activity mode) it can
	also set the text to anything it wants. What about none? Maybe have
	IRIS_PROGRESS_NO_TEXT display style? Would it make sense to give processes
	and even tasks a way to set their status, or do it on the watch? Definitely
	put the API in process and tasks, there could be more consumers than just
	watchers ...  ... I like this idea.

	We could also add custom display text, eg. "%i sheep of %i". Could that be
	done through status text? Maybe not the best way ..

	When totals are totally estimated, maybe "1 item of about 500" would make
	more sense ... allow somehow setting 'inaccurate' flag in
	iris_progress_set_output_estimation(), which would add "about" and maybe
	round the figure off to the nearest ten/hundred.

	The group progress bar in activity mode gets a bit weird. Best demonstrated
	in examples/progress-chains if you start loads of chains up; the progress
	bar might get a pulse step too low to actually go anywhere, or it's
	accounting for getting updates from 10 processes at once but actually only
	3 are running and sending updates. It all needs a bit more work, but this
	is not exactly vital code :)

Tests

	Would it make sense to run task and process tests with every scheduler,
	including the mock? Or at least mock, standard and gmain.

	progress-dialog/progress-monitor tests: use wait-func, not count-sheep-func.

	Add iris_task_wait() for test use only (just add it to the tests I guess)

Alex added warnings for GSimpleAsyncResult when not used from main thread.
We need to implement our own now since this isn't reusable.

Introspection. See:
  http://live.gnome.org/GObjectIntrospection/WritingBindingableAPIs

There are other FIXME's lurking in the code no doubt :)

---------------------------------------------------------------------------
Optimization TODO's
---------------------------------------------------------------------------

iris_message_unref()

	This method shows up on the profile. It has considerable wait time
	which is probably attributed to using g_slice_*(). We should look
	at options from pulse audio which use lock-free algorithms.

	The changes here should also be applied to the IrisThreadWork
	data structure.

	Lets verify this is really an issue, I highly doubt it now.  The
	frequent allocations for thread work might be a good idea to move
	to a free list though, so we reduce pressure on gslice.

iris_port_post()
iris_receiver_deliver_real()

	These related methods have significant wait time. This could be
	both from the atomic operations as well as the locks incurred.
	How can we reduce the potential for lock in these situations?

In iris-progress-monitor.c I recommend keeping an IrisProgressMonitor object
around but hidden throughout the running of the program rather than creating
and then destroying one again. Is this actually the best way? I imagine that
it is, that was why I recommended it.

Remove tests that aren't any use any more

Other superfluous stuff:
  * IrisProgressMonitor->remove_watch() doesn't need to be virtual

---------------------------------------------------------------------------
Niceties
---------------------------------------------------------------------------

Would it be a good idea to prevent progress bars from going backwards? ie.
if the fraction drops, just wait until it gets back to where it was rather
than showing a regression.

Processes should be throttleable - for example, say we are indexing the entire
file system. A directory crawler process searches the FS for files recursively,
but it may as well read the first 100 files, count the number of files in
subdirectories not yet touched (to give the user better info) and then wait for
the next processes to start working.

Make branches of some GNOME apps to use Iris!
For example: Nautilus, Epiphany, .. who else uses progress bars so much?

This is a GTK+ theme bug, but the 'expander in an infobar' is pretty ugly on hover
at least with clearlooks. One theme has progress bars in an infobar with a grey
background behind their rounded corners as well.

The cancel button is actually in quite an ugly place in GtkIrisProgressDialog.
This is the best Gtk+ can do without some special case code. The ideal design
is for the cancel button to line up centre-to-centre with the progress bar (in
single watch cases) or the group title, but without causing any of the padding
to change when the button is bigger than the widget it's in line with (which is
normally the case). This leads to unevenly-padded dialogs that look even worse.
The solution would be to put the buttons in a separate GtkFixed to the right of
the progress widgets, and on size-allocated for the dialog or add/removal of
widgets, the buttons are lined up with these widgets manually in a signal
handler. (If for some reason the font size was miniature this might cause the
buttons not to fit (b/c their icon size is fixed). This could be handled with
some sort of size-request hack but is probably too rare a case to worry about.)

---------------------------------------------------------------------------
The Future
---------------------------------------------------------------------------

Looking at how the .NET tasks framework is implemented in C# etc, with a lot
of integration and stuff like the 'await' keyword, perhaps it would be cool
to integrate Iris into Vala in the same way and provide similar functionality.

Another vision of how process chaining could work: add a process container
object. This would make chaining seem a bit less of a messy hack, but it kind
of seems like overkill while we don't actually need it.

If this project ever gets more adoption:
	http://ssickert.wordpress.com/2010/11/22/taskview-release/
it might be worth creating an IrisProgressMonitor that could send task status
over dbus according to the spec.

IrisProcess has some similarities with GstPipeline/GstElement. It would make
sense to ensure we agree on terminology/API where things match up, although
there would never really be a case for actually merging these things.

Other GNOME projects that use something like this: Nautilus, GIMP (image
processing tasks), Marlin (audio editing operations), file-roller? ardour?
other audio/video editing programs .. 

It would be cool to animate watches disappearing from the progress dialog. This
is pie in the sky :)

---------------------------------------------------------------------------
Related art
---------------------------------------------------------------------------

How does Iris relate to GThreadPool? Have we reinvented things we could
actually pull in from GLib?

GIO has some async primitives of its own. Other than in
iris_task_run_with_async_result() we don't really take advantage of them. Could
we replace bits of Iris with the glib code?

Also, what's this? http://repnop.org/ck/  - a possible source of existing
concurrency primitives to save having to manage our own in Iris. However
some of the stuff is duplicated in GLib.

Nautilus has FileOperations etc. Main differences from Iris:
  - ProgressInfo (our equivalent of progresswatches I think) have a
    GCancellable. IrisTask takes a totally different approach to cancelling, I
    don't know enough about GCancellable to see which makes more sense ...
  - ProgressInfo has a started signals, these could go on IrisTask if
    necessary
  - rather than a custom object for the overall progress monitor, there are
    NautilusProgressInfoWidget and NautilusProgressUIManager classes ... it's
    hard to see which is the better design, but I think the only real advantage
    of the Nautilus way is it's easier to alter the way the dialog works while
    still using the widget display code. I'm not sure why you would want to do
    that though unless you were making a change big enough that you'd probably
    want to display the watch in a different way anyway ..
  - a progress dialog can be closed, and it will then become a resident
    notification or status icon and will stay that way if further watches are
    added. This something it would be quite easy to implement outside of Iris,
    so whether it should be added depends on if there are other uses/if it's
    generally considered a good design feature.

C# & the CCR has some great features. Some is possible in Iris and some isn't.
  - the await keyword, which essentially calls a function as a task and then
    executes the rest of the caller function as a callback once it completes.
  - http://msdn.microsoft.com/en-us/library/dd537609.aspx
