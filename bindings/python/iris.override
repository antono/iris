%%
headers
#include <Python.h>
#include <pygobject.h>
#include "iris/iris.h"
#include "pyirismarshal.h"

#define PY_TYPE_OBJECT (py_object_get_type())
%%
module iris
%%
import gobject.GObject as PyGObject_Type
%%
ignore-glob
  *_get_type
  iris_init
  iris_task_all_of
  iris_task_vall_of
  iris_task_any_of
  iris_task_vany_of
  iris_task_new_with_closure
  iris_task_new_with_func
  iris_task_new_full
  iris_scheduler_default
  iris_scheduler_manager_print_stat
  iris_arbiter_coordinate

  iris_gsource_new

  iris_scheduler_new_full
  iris_lfscheduler_new_full
  iris_wsscheduler_new_full
%%
define IrisScheduler.default noargs staticmethod
static PyObject*
_wrap_iris_scheduler_default (void)
{
	return pygobject_new (G_OBJECT (iris_scheduler_default ()));
}
%%
define IrisTask.all_of kwargs staticmethod
static PyObject*
_wrap_iris_task_all_of (PyObject *self,
                        PyObject *args,
                        PyObject *kwargs)
{
	IrisTask   *task  = NULL;
	GList      *tasks = NULL;
	PyObject   *pytask;
	Py_ssize_t  length;
	gint        i;

	if (!args || (length = PySequence_Length (args)) == 0) {
		PyErr_SetString (PyExc_TypeError,
		                 "iris.Task.all_of takes at least one argument");
		return NULL;
	}

	if (PyErr_Occurred ())
		return NULL;

	for (i = 0; i < length; i++) {
		if (!(pytask = PySequence_GetItem (args, i))) {
			goto cleanup;
		}
		if (!pygobject_check (pytask, &PyIrisTask_Type)) {
			PyErr_SetString (PyExc_TypeError,
			                 "Argument something other than iris.Task");
			goto cleanup;
		}
		tasks = g_list_prepend (tasks, ((PyGObject*)pytask)->obj);
	}

	if (!(task = iris_task_all_of (tasks))) {
		PyErr_SetString (PyExc_RuntimeError,
		                 "An unknown error occurred while creating the task. "
		                 "Please submit a bug report.");
		goto cleanup;
	}

cleanup:
	g_list_free (tasks);

	if (task)
		return pygobject_new (G_OBJECT (task));

	return NULL;
}
%%
define IrisScheduler.print_stat noargs staticmethod
static PyObject*
_wrap_iris_scheduler_print_stat (void)
{
	iris_scheduler_manager_print_stat ();
	Py_INCREF (Py_None);
	return Py_None;
}
%%
define IrisTask.any_of kwargs staticmethod
static PyObject*
_wrap_iris_task_any_of (PyObject *self,
                        PyObject *args,
                        PyObject *kwargs)
{
	IrisTask   *task  = NULL;
	GList      *tasks = NULL;
	PyObject   *pytask;
	Py_ssize_t  length;
	gint        i;

	if (!args || (length = PySequence_Length (args)) == 0) {
		PyErr_SetString (PyExc_TypeError,
		                 "iris.Task.all_of takes at least one argument");
		return NULL;
	}

	if (PyErr_Occurred ())
		return NULL;

	for (i = 0; i < length; i++) {
		if (!(pytask = PySequence_GetItem (args, i))) {
			goto cleanup;
		}
		if (!pygobject_check (pytask, &PyIrisTask_Type)) {
			PyErr_SetString (PyExc_TypeError,
			                 "Argument something other than iris.Task");
			goto cleanup;
		}
		tasks = g_list_prepend (tasks, ((PyGObject*)pytask)->obj);
	}

	if (!(task = iris_task_any_of (tasks))) {
		PyErr_SetString (PyExc_RuntimeError,
		                 "An unknown error occurred while creating the task. "
		                 "Please submit a bug report.");
		goto cleanup;
	}

cleanup:
	g_list_free (tasks);

	if (task)
		return pygobject_new (G_OBJECT (task));

	return NULL;
}
%%
define IrisArbiter.coordinate kwargs staticmethod
static PyObject*
_wrap_iris_arbiter_coordinate (PyObject *self,
                               PyObject *args,
                               PyObject *kwargs)
{
	IrisArbiter  *arbiter      = NULL;
	PyObject     *pyexclusive  = NULL,
	             *pyconcurrent = NULL,
	             *pyteardown   = NULL;
	IrisReceiver *exclusive    = NULL,
	             *concurrent   = NULL,
	             *teardown     = NULL;
	Py_ssize_t    length;

	if (!args || (length = PySequence_Length (args)) <= 0) {
		PyErr_SetString (PyExc_TypeError,
		                 "iris.Arbiter.coordinate requires at least one argument");
		return NULL;
	}

#define ENSURE_ARBITER(pyobj)							\
	if(!pygobject_check(pyobj, &PyIrisReceiver_Type)) {			\
		PyErr_SetString (PyExc_TypeError,				\
		                 "All arguments must be of type iris.Arbiter");	\
		goto cleanup;							\
	}

	pyexclusive = PySequence_GetItem (args, 0);
	ENSURE_ARBITER (pyexclusive);
	exclusive = IRIS_RECEIVER (((PyGObject*)pyexclusive)->obj);

	if (length > 1) {
		pyconcurrent = PySequence_GetItem (args, 1);
		ENSURE_ARBITER (pyconcurrent);
		concurrent = IRIS_RECEIVER (((PyGObject*)pyconcurrent)->obj);
	}

	if (length > 2) {
		pyteardown = PySequence_GetItem (args, 2);
		ENSURE_ARBITER (pyteardown);
		teardown = IRIS_RECEIVER (((PyGObject*)pyteardown)->obj);
	}
#undef ENSURE_ARBITER

	arbiter = iris_arbiter_coordinate (exclusive, concurrent, teardown);

cleanup:
	Py_XDECREF (pyexclusive);
	Py_XDECREF (pyconcurrent);
	Py_XDECREF (pyteardown);

	if (arbiter)
		return pygobject_new (G_OBJECT (arbiter));
	return NULL;
}
