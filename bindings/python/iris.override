%%
headers
#include <Python.h>
#include <pygobject.h>
#include "iris/iris.h"
#include "pyirismarshal.h"

#define PY_TYPE_OBJECT (py_object_get_type())
%%
module iris
%%
import gobject.GObject as PyGObject_Type
%%
ignore-glob
  *_get_type
  iris_init
  iris_task_all_of
  iris_task_vall_of
  iris_task_any_of
  iris_task_vany_of
  iris_task_new_with_closure
  iris_task_new_with_func
  iris_task_new_full
  iris_scheduler_default
  iris_scheduler_manager_print_stat
  iris_arbiter_coordinate
  iris_arbiter_receive

  iris_gsource_new

  iris_scheduler_new_full
  iris_lfscheduler_new_full
  iris_wsscheduler_new_full
%%
define IrisScheduler.default noargs staticmethod
static PyObject*
_wrap_iris_scheduler_default (void)
{
	return pygobject_new (G_OBJECT (iris_scheduler_default ()));
}
%%
define IrisTask.all_of kwargs staticmethod
static PyObject*
_wrap_iris_task_all_of (PyObject *self,
                        PyObject *args,
                        PyObject *kwargs)
{
	IrisTask   *task   = NULL;
	GList      *tasks  = NULL;
	PyObject   *pytask = NULL;
	Py_ssize_t  length;
	gint        i;

	if (!args || (length = PySequence_Length (args)) == 0) {
		PyErr_SetString (PyExc_TypeError,
		                 "iris.Task.all_of takes at least one argument");
		return NULL;
	}

	if (PyErr_Occurred ())
		return NULL;

	for (i = 0; i < length; i++) {
		if (!(pytask = PySequence_GetItem (args, i))) {
			goto cleanup;
		}
		if (!pygobject_check (pytask, &PyIrisTask_Type)) {
			PyErr_SetString (PyExc_TypeError,
			                 "Argument something other than iris.Task");
			goto cleanup;
		}
		tasks = g_list_prepend (tasks, ((PyGObject*)pytask)->obj);
	}

	if (!(task = iris_task_all_of (tasks))) {
		PyErr_SetString (PyExc_RuntimeError,
		                 "An unknown error occurred while creating the task. "
		                 "Please submit a bug report.");
		goto cleanup;
	}

cleanup:
	Py_XDECREF (pytask);
	g_list_free (tasks);

	if (task)
		return pygobject_new (G_OBJECT (task));

	return NULL;
}
%%
define IrisScheduler.print_stat noargs staticmethod
static PyObject*
_wrap_iris_scheduler_print_stat (void)
{
	iris_scheduler_manager_print_stat ();
	Py_INCREF (Py_None);
	return Py_None;
}
%%
define IrisTask.any_of kwargs staticmethod
static PyObject*
_wrap_iris_task_any_of (PyObject *self,
                        PyObject *args,
                        PyObject *kwargs)
{
	IrisTask   *task   = NULL;
	GList      *tasks  = NULL;
	PyObject   *pytask = NULL;
	Py_ssize_t  length;
	gint        i;

	if (!args || (length = PySequence_Length (args)) == 0) {
		PyErr_SetString (PyExc_TypeError,
		                 "iris.Task.all_of takes at least one argument");
		return NULL;
	}

	if (PyErr_Occurred ())
		return NULL;

	for (i = 0; i < length; i++) {
		if (!(pytask = PySequence_GetItem (args, i))) {
			goto cleanup;
		}
		if (!pygobject_check (pytask, &PyIrisTask_Type)) {
			PyErr_SetString (PyExc_TypeError,
			                 "Argument something other than iris.Task");
			goto cleanup;
		}
		tasks = g_list_prepend (tasks, ((PyGObject*)pytask)->obj);
	}

	if (!(task = iris_task_any_of (tasks))) {
		PyErr_SetString (PyExc_RuntimeError,
		                 "An unknown error occurred while creating the task. "
		                 "Please submit a bug report.");
		goto cleanup;
	}

cleanup:
	Py_XDECREF (pytask);
	g_list_free (tasks);

	if (task)
		return pygobject_new (G_OBJECT (task));

	return NULL;
}
%%
define IrisArbiter.coordinate kwargs staticmethod
static PyObject*
_wrap_iris_arbiter_coordinate (PyObject *self,
                               PyObject *args,
                               PyObject *kwargs)
{
	IrisArbiter  *arbiter      = NULL;
	PyObject     *pyexclusive  = NULL,
	             *pyconcurrent = NULL,
	             *pyteardown   = NULL;
	IrisReceiver *exclusive    = NULL,
	             *concurrent   = NULL,
	             *teardown     = NULL;
	Py_ssize_t    length;

	if (!args || (length = PySequence_Length (args)) <= 0) {
		PyErr_SetString (PyExc_TypeError,
		                 "iris.Arbiter.coordinate requires at least one argument");
		return NULL;
	}

#define ENSURE_ARBITER(pyobj)							\
	if(!pygobject_check(pyobj, &PyIrisReceiver_Type)) {			\
		PyErr_SetString (PyExc_TypeError,				\
		                 "All arguments must be of type iris.Arbiter");	\
		goto cleanup;							\
	}

	pyexclusive = PySequence_GetItem (args, 0);
	ENSURE_ARBITER (pyexclusive);
	exclusive = IRIS_RECEIVER (((PyGObject*)pyexclusive)->obj);

	if (length > 1) {
		pyconcurrent = PySequence_GetItem (args, 1);
		ENSURE_ARBITER (pyconcurrent);
		concurrent = IRIS_RECEIVER (((PyGObject*)pyconcurrent)->obj);
	}

	if (length > 2) {
		pyteardown = PySequence_GetItem (args, 2);
		ENSURE_ARBITER (pyteardown);
		teardown = IRIS_RECEIVER (((PyGObject*)pyteardown)->obj);
	}
#undef ENSURE_ARBITER

	arbiter = iris_arbiter_coordinate (exclusive, concurrent, teardown);

cleanup:
	Py_XDECREF (pyexclusive);
	Py_XDECREF (pyconcurrent);
	Py_XDECREF (pyteardown);

	if (arbiter)
		return pygobject_new (G_OBJECT (arbiter));
	return NULL;
}
%%
define IrisArbiter.receive kwargs staticmethod

typedef struct {
	PyObject *callable;
	PyObject *data;
} PyIrisMessageHandlerData;

static void
pyiris_message_handler (IrisMessage *message,
                        gpointer     data)
{
	PyGILState_STATE          state;
	PyIrisMessageHandlerData *pydata;
	PyObject                 *pyresult = NULL,
	                         *pyargs   = NULL,
	                         *pyarg    = NULL;

	g_return_if_fail (data != NULL);

	state = pyg_gil_state_ensure ();
	pydata = data;

	if (!(pyarg = g_value_get_boxed (iris_message_get_data (message)))) {
		PyErr_SetString (PyExc_RuntimeError,
		                 "Got unknown message value, expected PyObject");
		goto cleanup;
	}

	if (pydata->data) {
		if (!(pyargs = Py_BuildValue ("(OO)", pyarg, pydata->data))) {
			PyErr_Print ();
			goto cleanup;
		}
	}
	else {
		if (!(pyargs = Py_BuildValue ("(O)", pyarg))) {
			PyErr_Print ();
			goto cleanup;
		}
	}

	if (!(pyresult = PyObject_CallObject (pydata->callable, pyargs)))
		PyErr_Print ();

cleanup:
	Py_XDECREF (pyresult);
	Py_XDECREF (pyargs);
	Py_XDECREF (pyarg);

	pyg_gil_state_release (state);
}

static void
pyiris_receiver_destroy_notify (gpointer data)
{
	PyGILState_STATE          state;
	PyIrisMessageHandlerData *pydata;

	g_return_if_fail (data != NULL);

	pydata = data;
	state = pyg_gil_state_ensure ();

	Py_XDECREF (pydata->callable);
	Py_XDECREF (pydata->data);
	g_slice_free (PyIrisMessageHandlerData, pydata);

	pyg_gil_state_release (state);
}

static PyObject*
_wrap_iris_arbiter_receive (PyObject *self,
                            PyObject *args,
                            PyObject *kwargs)
{
	IrisReceiver             *receiver     = NULL;
	PyObject                 *pyscheduler  = NULL,
	                         *pyport       = NULL,
	                         *pyhandler    = NULL,
	                         *pydata       = NULL;
	IrisScheduler            *scheduler    = NULL;
	IrisPort                 *port         = NULL;
	IrisMessageHandler        handler      = NULL;
	PyIrisMessageHandlerData *handler_data = NULL;
	static char              *kwlist[]     = {
		"port",
		"handler",
		"data",
		"scheduler",
		NULL
	};

	if (!PyArg_ParseTupleAndKeywords (args, kwargs,
	                                  "OO|OO:iris.Arbiter.receive",
	                                  kwlist,
	                                  &pyport, &pyhandler,
	                                  &pydata, &pyscheduler))
	        return NULL;

	if (!pygobject_check (pyport, &PyIrisPort_Type)) {
		PyErr_SetString (PyExc_TypeError,
		                 "port must be of type iris.Port");
		return NULL;
	}

	if (!PyCallable_Check (pyhandler)) {
		PyErr_SetString (PyExc_TypeError,
		                 "handler must be a callable object");
		return NULL;
	}

	if (pyscheduler && pyscheduler != Py_None) {
		if (!pygobject_check (pyscheduler, &PyIrisScheduler_Type)) {
			PyErr_SetString (PyExc_TypeError,
			                 "scheduler must be of type iris.Scheduler");
			return NULL;
		}
		scheduler = IRIS_SCHEDULER (((PyGObject*)pyscheduler)->obj);
	}

	port = IRIS_PORT (((PyGObject*)pyport)->obj);
	handler = pyiris_message_handler;

	handler_data = g_slice_new (PyIrisMessageHandlerData);
	handler_data->callable = pyhandler;
	handler_data->data = pydata;
	Py_XINCREF (pydata);
	Py_XINCREF (pyhandler);

	receiver = iris_arbiter_receive (scheduler, port,
	                                 handler, handler_data,
	                                 pyiris_receiver_destroy_notify);

cleanup:
	if (receiver)
		return pygobject_new (G_OBJECT (receiver));

	return NULL;
}
%%
override iris_port_post
static PyObject*
_wrap_iris_port_post (PyGObject *self,
                      PyObject  *args)
{
	PyGILState_STATE  state;
	IrisMessage      *message;
	PyObject         *pydata       = NULL;
	guint             message_type = 0;

	g_return_val_if_fail (pygobject_check (self, &PyIrisPort_Type), NULL);

	state = pyg_gil_state_ensure ();

	if (PySequence_Length (args) > 0)
		pydata = args;
	else
		pydata = PyTuple_New (0);

	Py_INCREF (pydata);
	message = iris_message_new_data (message_type, g_type_from_name ("PyObject"), pydata);
	iris_port_post (IRIS_PORT (self->obj), message);
	Py_INCREF (Py_None);
	pyg_gil_state_release (state);

	return Py_None;
}
