;; -*- scheme -*-
; object definitions ...
(define-object Port
  (in-module "Iris")
  (parent "GObject")
  (c-name "IrisPort")
  (gtype-id "IRIS_TYPE_PORT")
)

(define-object Scheduler
  (in-module "Iris")
  (parent "GObject")
  (c-name "IrisScheduler")
  (gtype-id "IRIS_TYPE_SCHEDULER")
)

(define-object LFScheduler
  (in-module "Iris")
  (parent "IrisScheduler")
  (c-name "IrisLFScheduler")
  (gtype-id "IRIS_TYPE_LFSCHEDULER")
)

(define-object GMainScheduler
  (in-module "Iris")
  (parent "IrisScheduler")
  (c-name "IrisGMainScheduler")
  (gtype-id "IRIS_TYPE_GMAINSCHEDULER")
)

(define-object Service
  (in-module "Iris")
  (parent "GObject")
  (c-name "IrisService")
  (gtype-id "IRIS_TYPE_SERVICE")
)

(define-object Task
  (in-module "Iris")
  (parent "GObject")
  (c-name "IrisTask")
  (gtype-id "IRIS_TYPE_TASK")
)

(define-object WSScheduler
  (in-module "Iris")
  (parent "IrisScheduler")
  (c-name "IrisWSScheduler")
  (gtype-id "IRIS_TYPE_WSSCHEDULER")
)

;; Enumerations and flags ...


;; From iris-arbiter.h

(define-function iris_arbiter_get_type
  (c-name "iris_arbiter_get_type")
  (return-type "GType")
)

(define-function iris_arbiter_receive
  (c-name "iris_arbiter_receive")
  (return-type "IrisReceiver*")
  (parameters
    '("IrisScheduler*" "scheduler")
    '("IrisPort*" "port")
    '("IrisMessageHandler" "handler")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-function iris_arbiter_coordinate
  (c-name "iris_arbiter_coordinate")
  (return-type "IrisArbiter*")
  (parameters
    '("IrisReceiver*" "exclusive")
    '("IrisReceiver*" "concurrent")
    '("IrisReceiver*" "teardown")
  )
)



;; From iris-gmainscheduler.h

(define-function iris_gmainscheduler_get_type
  (c-name "iris_gmainscheduler_get_type")
  (return-type "GType")
)

(define-function iris_gmainscheduler_new
  (c-name "iris_gmainscheduler_new")
  (is-constructor-of "IrisGmainscheduler")
  (return-type "IrisScheduler*")
  (parameters
    '("GMainContext*" "context")
  )
)

(define-method get_context
  (of-object "IrisGMainScheduler")
  (c-name "iris_gmainscheduler_get_context")
  (return-type "GMainContext*")
)



;; From iris-lfscheduler.h

(define-function iris_lfscheduler_get_type
  (c-name "iris_lfscheduler_get_type")
  (return-type "GType")
)

(define-function iris_lfscheduler_new
  (c-name "iris_lfscheduler_new")
  (is-constructor-of "IrisLfscheduler")
  (return-type "IrisScheduler*")
)

(define-function iris_lfscheduler_new_full
  (c-name "iris_lfscheduler_new_full")
  (return-type "IrisScheduler*")
  (parameters
    '("guint" "min_threads")
    '("guint" "max_threads")
  )
)



;; From iris-message.h

(define-function iris_message_get_type
  (c-name "iris_message_get_type")
  (return-type "GType")
)

(define-function iris_message_new
  (c-name "iris_message_new")
  (is-constructor-of "IrisMessage")
  (return-type "IrisMessage*")
  (parameters
    '("gint" "what")
  )
)

(define-function iris_message_new_data
  (c-name "iris_message_new_data")
  (return-type "IrisMessage*")
  (parameters
    '("gint" "what")
    '("GType" "type")
  )
  (varargs #t)
)

(define-function iris_message_new_full
  (c-name "iris_message_new_full")
  (return-type "IrisMessage*")
  (parameters
    '("gint" "what")
    '("const-gchar*" "first_name")
  )
  (varargs #t)
)

(define-method ref
  (of-object "IrisMessage")
  (c-name "iris_message_ref")
  (return-type "IrisMessage*")
)

(define-method unref
  (of-object "IrisMessage")
  (c-name "iris_message_unref")
  (return-type "none")
)

(define-method copy
  (of-object "IrisMessage")
  (c-name "iris_message_copy")
  (return-type "IrisMessage*")
)

(define-method get_data
  (of-object "IrisMessage")
  (c-name "iris_message_get_data")
  (return-type "const-GValue*")
)

(define-method set_data
  (of-object "IrisMessage")
  (c-name "iris_message_set_data")
  (return-type "none")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-method count_names
  (of-object "IrisMessage")
  (c-name "iris_message_count_names")
  (return-type "guint")
)

(define-method is_empty
  (of-object "IrisMessage")
  (c-name "iris_message_is_empty")
  (return-type "gboolean")
)

(define-method contains
  (of-object "IrisMessage")
  (c-name "iris_message_contains")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_value
  (of-object "IrisMessage")
  (c-name "iris_message_get_value")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("GValue*" "value")
  )
)

(define-method set_value
  (of-object "IrisMessage")
  (c-name "iris_message_set_value")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("const-GValue*" "value")
  )
)

(define-method get_string
  (of-object "IrisMessage")
  (c-name "iris_message_get_string")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_string
  (of-object "IrisMessage")
  (c-name "iris_message_set_string")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "value")
  )
)

(define-method get_int
  (of-object "IrisMessage")
  (c-name "iris_message_get_int")
  (return-type "gint")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_int
  (of-object "IrisMessage")
  (c-name "iris_message_set_int")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint" "value")
  )
)

(define-method get_int64
  (of-object "IrisMessage")
  (c-name "iris_message_get_int64")
  (return-type "gint64")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_int64
  (of-object "IrisMessage")
  (c-name "iris_message_set_int64")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint64" "value")
  )
)

(define-method get_float
  (of-object "IrisMessage")
  (c-name "iris_message_get_float")
  (return-type "gfloat")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_float
  (of-object "IrisMessage")
  (c-name "iris_message_set_float")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gfloat" "value")
  )
)

(define-method get_double
  (of-object "IrisMessage")
  (c-name "iris_message_get_double")
  (return-type "gdouble")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_double
  (of-object "IrisMessage")
  (c-name "iris_message_set_double")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gdouble" "value")
  )
)

(define-method get_long
  (of-object "IrisMessage")
  (c-name "iris_message_get_long")
  (return-type "glong")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_long
  (of-object "IrisMessage")
  (c-name "iris_message_set_long")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("glong" "value")
  )
)

(define-method get_ulong
  (of-object "IrisMessage")
  (c-name "iris_message_get_ulong")
  (return-type "gulong")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_ulong
  (of-object "IrisMessage")
  (c-name "iris_message_set_ulong")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gulong" "value")
  )
)

(define-method get_char
  (of-object "IrisMessage")
  (c-name "iris_message_get_char")
  (return-type "gchar")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_char
  (of-object "IrisMessage")
  (c-name "iris_message_set_char")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gchar" "value")
  )
)

(define-method get_uchar
  (of-object "IrisMessage")
  (c-name "iris_message_get_uchar")
  (return-type "guchar")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_uchar
  (of-object "IrisMessage")
  (c-name "iris_message_set_uchar")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("guchar" "value")
  )
)

(define-method get_boolean
  (of-object "IrisMessage")
  (c-name "iris_message_get_boolean")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_boolean
  (of-object "IrisMessage")
  (c-name "iris_message_set_boolean")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gboolean" "value")
  )
)

(define-method get_pointer
  (of-object "IrisMessage")
  (c-name "iris_message_get_pointer")
  (return-type "gpointer")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_pointer
  (of-object "IrisMessage")
  (c-name "iris_message_set_pointer")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gpointer" "value")
  )
)

(define-method get_object
  (of-object "IrisMessage")
  (c-name "iris_message_get_object")
  (return-type "GObject*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method set_object
  (of-object "IrisMessage")
  (c-name "iris_message_set_object")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("GObject*" "object")
  )
)



;; From iris-port.h

(define-function iris_port_get_type
  (c-name "iris_port_get_type")
  (return-type "GType")
)

(define-function iris_port_new
  (c-name "iris_port_new")
  (is-constructor-of "IrisPort")
  (return-type "IrisPort*")
)

(define-method post
  (of-object "IrisPort")
  (c-name "iris_port_post")
  (return-type "none")
  (parameters
    '("IrisMessage*" "message")
  )
)

(define-method repost
  (of-object "IrisPort")
  (c-name "iris_port_repost")
  (return-type "none")
  (parameters
    '("IrisMessage*" "message")
  )
)

(define-method flush
  (of-object "IrisPort")
  (c-name "iris_port_flush")
  (return-type "none")
)

(define-method is_paused
  (of-object "IrisPort")
  (c-name "iris_port_is_paused")
  (return-type "gboolean")
)

(define-method has_receiver
  (of-object "IrisPort")
  (c-name "iris_port_has_receiver")
  (return-type "gboolean")
)

(define-method get_receiver
  (of-object "IrisPort")
  (c-name "iris_port_get_receiver")
  (return-type "IrisReceiver*")
)

(define-method set_receiver
  (of-object "IrisPort")
  (c-name "iris_port_set_receiver")
  (return-type "none")
  (parameters
    '("IrisReceiver*" "receiver")
  )
)

(define-method get_queue_count
  (of-object "IrisPort")
  (c-name "iris_port_get_queue_count")
  (return-type "guint")
)



;; From iris-receiver.h

(define-function iris_receiver_get_type
  (c-name "iris_receiver_get_type")
  (return-type "GType")
)

(define-method get_scheduler
  (of-object "IrisReceiver")
  (c-name "iris_receiver_get_scheduler")
  (return-type "IrisScheduler*")
)

(define-method set_scheduler
  (of-object "IrisReceiver")
  (c-name "iris_receiver_set_scheduler")
  (return-type "none")
  (parameters
    '("IrisScheduler*" "scheduler")
  )
)



;; From iris-rrobin.h

(define-function iris_rrobin_get_type
  (c-name "iris_rrobin_get_type")
  (return-type "GType")
)

(define-function iris_rrobin_new
  (c-name "iris_rrobin_new")
  (is-constructor-of "IrisRrobin")
  (return-type "IrisRRobin*")
  (parameters
    '("gint" "size")
  )
)

(define-method ref
  (of-object "IrisRRobin")
  (c-name "iris_rrobin_ref")
  (return-type "IrisRRobin*")
)

(define-method unref
  (of-object "IrisRRobin")
  (c-name "iris_rrobin_unref")
  (return-type "none")
)

(define-method append
  (of-object "IrisRRobin")
  (c-name "iris_rrobin_append")
  (return-type "gboolean")
  (parameters
    '("gpointer" "data")
  )
)

(define-method remove
  (of-object "IrisRRobin")
  (c-name "iris_rrobin_remove")
  (return-type "none")
  (parameters
    '("gpointer" "data")
  )
)

(define-method apply
  (of-object "IrisRRobin")
  (c-name "iris_rrobin_apply")
  (return-type "gboolean")
  (parameters
    '("IrisRRobinFunc" "callback")
    '("gpointer" "user_data")
  )
)

(define-method foreach
  (of-object "IrisRRobin")
  (c-name "iris_rrobin_foreach")
  (return-type "none")
  (parameters
    '("IrisRRobinForeachFunc" "callback")
    '("gpointer" "user_data")
  )
)



;; From iris-scheduler.h

(define-function iris_thread_get_type
  (c-name "iris_thread_get_type")
  (return-type "GType")
)

(define-function iris_scheduler_get_type
  (c-name "iris_scheduler_get_type")
  (return-type "GType")
)

(define-function iris_scheduler_new
  (c-name "iris_scheduler_new")
  (is-constructor-of "IrisScheduler")
  (return-type "IrisScheduler*")
)

(define-function iris_scheduler_new_full
  (c-name "iris_scheduler_new_full")
  (return-type "IrisScheduler*")
  (parameters
    '("guint" "min_threads")
    '("guint" "max_threads")
  )
)

(define-function iris_scheduler_default
  (c-name "iris_scheduler_default")
  (return-type "IrisScheduler*")
)

(define-method set_default
  (of-object "IrisScheduler")
  (c-name "iris_scheduler_set_default")
  (return-type "none")
)

(define-method get_min_threads
  (of-object "IrisScheduler")
  (c-name "iris_scheduler_get_min_threads")
  (return-type "gint")
)

(define-method get_max_threads
  (of-object "IrisScheduler")
  (c-name "iris_scheduler_get_max_threads")
  (return-type "gint")
)

(define-method queue
  (of-object "IrisScheduler")
  (c-name "iris_scheduler_queue")
  (return-type "none")
  (parameters
    '("IrisCallback" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-method add_thread
  (of-object "IrisScheduler")
  (c-name "iris_scheduler_add_thread")
  (return-type "none")
  (parameters
    '("IrisThread*" "thread")
  )
)

(define-method remove_thread
  (of-object "IrisScheduler")
  (c-name "iris_scheduler_remove_thread")
  (return-type "none")
  (parameters
    '("IrisThread*" "thread")
  )
)

(define-function iris_thread_new
  (c-name "iris_thread_new")
  (is-constructor-of "IrisThread")
  (return-type "IrisThread*")
  (parameters
    '("gboolean" "exclusive")
  )
)

(define-function iris_thread_get
  (c-name "iris_thread_get")
  (return-type "IrisThread*")
)

(define-method manage
  (of-object "IrisThread")
  (c-name "iris_thread_manage")
  (return-type "none")
  (parameters
    '("IrisQueue*" "queue")
    '("gboolean" "leader")
  )
)

(define-method shutdown
  (of-object "IrisThread")
  (c-name "iris_thread_shutdown")
  (return-type "none")
)

(define-method print_stat
  (of-object "IrisThread")
  (c-name "iris_thread_print_stat")
  (return-type "none")
)

(define-function iris_thread_work_new
  (c-name "iris_thread_work_new")
  (is-constructor-of "IrisThreadWork")
  (return-type "IrisThreadWork*")
  (parameters
    '("IrisCallback" "callback")
    '("gpointer" "data")
  )
)

(define-method free
  (of-object "IrisThreadWork")
  (c-name "iris_thread_work_free")
  (return-type "none")
)

(define-method run
  (of-object "IrisThreadWork")
  (c-name "iris_thread_work_run")
  (return-type "none")
)



;; From iris-scheduler-manager.h

(define-method manager_prepare
  (of-object "IrisScheduler")
  (c-name "iris_scheduler_manager_prepare")
  (return-type "none")
)

(define-method manager_unprepare
  (of-object "IrisScheduler")
  (c-name "iris_scheduler_manager_unprepare")
  (return-type "none")
)

(define-method manager_request
  (of-object "IrisScheduler")
  (c-name "iris_scheduler_manager_request")
  (return-type "none")
  (parameters
    '("guint" "per_quantum")
    '("guint" "total")
  )
)

(define-function iris_scheduler_manager_print_stat
  (c-name "iris_scheduler_manager_print_stat")
  (return-type "none")
)



;; From iris-service.h

(define-function iris_service_get_type
  (c-name "iris_service_get_type")
  (return-type "GType")
)

(define-method start
  (of-object "IrisService")
  (c-name "iris_service_start")
  (return-type "none")
)

(define-method stop
  (of-object "IrisService")
  (c-name "iris_service_stop")
  (return-type "none")
)

(define-method send_exclusive
  (of-object "IrisService")
  (c-name "iris_service_send_exclusive")
  (return-type "none")
  (parameters
    '("IrisMessage*" "message")
  )
)

(define-method send_concurrent
  (of-object "IrisService")
  (c-name "iris_service_send_concurrent")
  (return-type "none")
  (parameters
    '("IrisMessage*" "message")
  )
)

(define-method is_started
  (of-object "IrisService")
  (c-name "iris_service_is_started")
  (return-type "gboolean")
)



;; From iris-task.h

(define-function iris_task_get_type
  (c-name "iris_task_get_type")
  (return-type "GType")
)

(define-function iris_task_new
  (c-name "iris_task_new")
  (is-constructor-of "IrisTask")
  (return-type "IrisTask*")
)

(define-function iris_task_new_with_func
  (c-name "iris_task_new_with_func")
  (return-type "IrisTask*")
  (parameters
    '("IrisTaskFunc" "func")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-function iris_task_new_with_closure
  (c-name "iris_task_new_with_closure")
  (return-type "IrisTask*")
  (parameters
    '("GClosure*" "closure")
  )
)

(define-function iris_task_new_full
  (c-name "iris_task_new_full")
  (return-type "IrisTask*")
  (parameters
    '("IrisTaskFunc" "func")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
    '("gboolean" "async")
    '("IrisScheduler*" "scheduler")
    '("GMainContext*" "context")
  )
)

(define-method run
  (of-object "IrisTask")
  (c-name "iris_task_run")
  (return-type "none")
)

(define-method run_async
  (of-object "IrisTask")
  (c-name "iris_task_run_async")
  (return-type "none")
  (parameters
    '("GAsyncReadyCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method cancel
  (of-object "IrisTask")
  (c-name "iris_task_cancel")
  (return-type "none")
)

(define-method complete
  (of-object "IrisTask")
  (c-name "iris_task_complete")
  (return-type "none")
)

(define-method add_callback
  (of-object "IrisTask")
  (c-name "iris_task_add_callback")
  (return-type "none")
  (parameters
    '("IrisTaskFunc" "callback")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-method add_errback
  (of-object "IrisTask")
  (c-name "iris_task_add_errback")
  (return-type "none")
  (parameters
    '("IrisTaskFunc" "errback")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-method add_callback_closure
  (of-object "IrisTask")
  (c-name "iris_task_add_callback_closure")
  (return-type "none")
  (parameters
    '("GClosure*" "closure")
  )
)

(define-method add_errback_closure
  (of-object "IrisTask")
  (c-name "iris_task_add_errback_closure")
  (return-type "none")
  (parameters
    '("GClosure*" "closure")
  )
)

(define-method add_both
  (of-object "IrisTask")
  (c-name "iris_task_add_both")
  (return-type "none")
  (parameters
    '("IrisTaskFunc" "callback")
    '("IrisTaskFunc" "errback")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-method add_both_closure
  (of-object "IrisTask")
  (c-name "iris_task_add_both_closure")
  (return-type "none")
  (parameters
    '("GClosure*" "callback")
    '("GClosure*" "errback")
  )
)

(define-method add_dependency
  (of-object "IrisTask")
  (c-name "iris_task_add_dependency")
  (return-type "none")
  (parameters
    '("IrisTask*" "dependency")
  )
)

(define-method remove_dependency
  (of-object "IrisTask")
  (c-name "iris_task_remove_dependency")
  (return-type "none")
  (parameters
    '("IrisTask*" "dependency")
  )
)

(define-method remove_dependency_sync
  (of-object "IrisTask")
  (c-name "iris_task_remove_dependency_sync")
  (return-type "none")
  (parameters
    '("IrisTask*" "dependency")
  )
)

(define-method is_async
  (of-object "IrisTask")
  (c-name "iris_task_is_async")
  (return-type "gboolean")
)

(define-method is_executing
  (of-object "IrisTask")
  (c-name "iris_task_is_executing")
  (return-type "gboolean")
)

(define-method is_canceled
  (of-object "IrisTask")
  (c-name "iris_task_is_canceled")
  (return-type "gboolean")
)

(define-method is_finished
  (of-object "IrisTask")
  (c-name "iris_task_is_finished")
  (return-type "gboolean")
)

(define-method set_main_context
  (of-object "IrisTask")
  (c-name "iris_task_set_main_context")
  (return-type "none")
  (parameters
    '("GMainContext*" "context")
  )
)

(define-method get_main_context
  (of-object "IrisTask")
  (c-name "iris_task_get_main_context")
  (return-type "GMainContext*")
)

(define-method set_scheduler
  (of-object "IrisTask")
  (c-name "iris_task_set_scheduler")
  (return-type "none")
  (parameters
    '("IrisScheduler*" "scheduler")
  )
)

(define-method has_error
  (of-object "IrisTask")
  (c-name "iris_task_has_error")
  (return-type "gboolean")
)

(define-method get_error
  (of-object "IrisTask")
  (c-name "iris_task_get_error")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method set_error
  (of-object "IrisTask")
  (c-name "iris_task_set_error")
  (return-type "none")
  (parameters
    '("const-GError*" "error")
  )
)

(define-method take_error
  (of-object "IrisTask")
  (c-name "iris_task_take_error")
  (return-type "none")
  (parameters
    '("GError*" "error")
  )
)

(define-method get_result
  (of-object "IrisTask")
  (c-name "iris_task_get_result")
  (return-type "none")
  (parameters
    '("GValue*" "value")
  )
)

(define-method set_result
  (of-object "IrisTask")
  (c-name "iris_task_set_result")
  (return-type "none")
  (parameters
    '("const-GValue*" "value")
  )
)

(define-method set_result_gtype
  (of-object "IrisTask")
  (c-name "iris_task_set_result_gtype")
  (return-type "none")
  (parameters
    '("GType" "type")
  )
  (varargs #t)
)

(define-method vall_of
  (of-object "IrisTask")
  (c-name "iris_task_vall_of")
  (return-type "IrisTask*")
  (parameters
  )
  (varargs #t)
)

(define-function iris_task_all_of
  (c-name "iris_task_all_of")
  (return-type "IrisTask*")
  (parameters
    '("GList*" "tasks")
  )
)

(define-method vany_of
  (of-object "IrisTask")
  (c-name "iris_task_vany_of")
  (return-type "IrisTask*")
  (parameters
  )
  (varargs #t)
)

(define-function iris_task_any_of
  (c-name "iris_task_any_of")
  (return-type "IrisTask*")
  (parameters
    '("GList*" "tasks")
  )
)



;; From iris-wsscheduler.h

(define-function iris_wsscheduler_get_type
  (c-name "iris_wsscheduler_get_type")
  (return-type "GType")
)

(define-function iris_wsscheduler_new
  (c-name "iris_wsscheduler_new")
  (is-constructor-of "IrisWsscheduler")
  (return-type "IrisScheduler*")
)

(define-function iris_wsscheduler_new_full
  (c-name "iris_wsscheduler_new_full")
  (return-type "IrisScheduler*")
  (parameters
    '("guint" "min_threads")
    '("guint" "max_threads")
  )
)


