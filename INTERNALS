Message passing
---------------

  calling thread:    port_post() -> receiver_deliver() -> scheduler_queue()
  scheduler thread:  receiver_worker() -> actual message handler

This is the simplest workflow, when CoordinationArbiter is involved it becomes
more complex:

* IrisReceiver:
  - this is the core of message processing. At its heart, the calling thread
    queues a work item in the receiver's scheduler to execute the receiver's
    handle message function. iris_receiver_worker() executes in the receiver's
    scheduler and calls the message handler.

  - a connected port calls iris_receiver_deliver(). The following can happen:

     > if the receiver has no arbiter, the message is posted to the scheduler
       straight away.
     > otherwise the arbiter may decide to post now, later or never.
     > the receiver can queue one item for posting later, then it tells the
       port to pause.

* IrisPort:
  - port has two modes, normal and paused. Paused is set by the receiver, and
    in this state iris_receiver_deliver doesn't even get called, messages are
    queued up inside the port.

* IrisArbiter:
  - you coordinate receivers in this way:
      iris_arbiter_coordinate(exclusive, concurrent, teardown)
    where each paramater is a receiver or NULL.
  
  - Which mode you put a receiver in affects how many active messages it can
    have at once, ie. how many threads can be running iris_receiver_worker()
    (and therefore the actual processing callback) at once. If you are sending
    work items to a process, these may be processed as fast as possible. If you
    are sending control messages such as start, stop or cancel you only want
    one being processed at a time to prevent needless contention and confusion.

     > exclusive: only 1 message will be processed at once; when
       iris_arbiter_can_deliver() is called receiver->active:=1 and no more
       messages will be allowed until after iris_receiver_worker() has called
       the message callback, at which point it calls
       iris_arbiter_receive_complete()

   - iris_arbiter_receive_complete() will --receiver->active and call
     iris_receiver_resume() on one of the receivers, this flushes all the
     queues so more messages can be processed !
  

Schedulers
----------

* IrisSchedulerManager:
  - everything is initialised lazily: the first call to iris_scheduler_queue()
    calls iris_scheduler_manager_prepare() to initialise the scheduler, and
    iris_scheduler_manager_prepare() initialises the global scheduler manager
    on its first call.

* IrisScheduler:
  - in iris_scheduler_manager_prepare(), scheduler->min_threads are acquired
    and attached to the scheduler. scheduler->max_threads is a hard limit: calls
    to iris_scheduler_add_thread() when already at max will have no effect.
  - each thread has its own work queue and each queue is tracked in an
    IrisRRobin structure. In iris_scheduler_queue(), work is simply pushed to
    the next queue in the rrobin.

* IrisThread:
  - each thread also has its own message queue. When started,
    iris_thread_worker() runs waiting for a message.
  - threads have 3 normal states: waiting for a message, and 'transient' and
    'exclusive' modes. When the manage message is received, transient or
    exclusive mode is entered and the thread begins running through the work
    queue.
  - note that the message queue is thread->queue, work queue is thread->active.


Tasks and Processes
-------------------

These are stateful objects. Currently there is no explicit state variable, but
various flags represent different states of execution. I plan to introduce an
explicit 'state' variable to make the code easier to follow. Below is a list of
the states tasks and processes go through.

The START_CANCEL and DEP_CANCELLED messages can be received at any time. A
cancel completes when FINISH_CANCEL is processed, at which point the execution
ref is released and the task may be finalized. In state diagram, 'normal
behaviour' refers to the following:
  * for IrisTask, the FINISH_CANCEL usually follows the START_CANCEL directly.
  * for IrisProcess, there are two exceptions to this. Firstly, the process
    will never send FINISH_CANCEL until iris_process_close() has been called, to
    prevent it being freed while users expect to still be able to queue work.
    Also, when the process is connected to a source, the process will expect to
    receive CHAIN_CANCEL before sending FINISH_CANCEL to ensure the chain
    cancels in order.

Preparation:
  - no flags set
  - on START_CANCEL: normal behaviour

  The object becomes largely immutable on leaving this state, eg. no more
  callbacks or dependencies can be added.

  START_WORK message => pre-execution

Pre-execution:
  - flags: NEED_EXECUTE, STARTED
  - on START_CANCEL: normal behaviour, NEED_EXECUTE is unset
                     

  If there are no dependencies, or when all dependencies have sent DEP_FINISHED
  message, task is enqueued and NEED_EXECUTE is unset => execution.

Execution:
  - flags: WORK_ACTIVE, STARTED
  - on START_CANCEL: FINISH_CANCEL is not sent until the work function exits.

  The main stage: work function executes.
  
  WORK_FINISHED message => callbacks

Callbacks:
  - flags: CALLBACKS_ACTIVE, STARTED
  - on START_CANCEL: cancel is ignored because the work is already complete

  PROGRESS_CALLBACKS message is used to trigger one callback and is then sent
  again to trigger the next one.

  CALLBACKS_FINISHED message => finished

Finished:
  - flags: FINISHED, STARTED
  - on START_CANCEL: ignored

  DEP_FINISHED message is sent to observers.

Cancelled:
  - flags: CANCELLED (and maybe STARTED)

  DEP_CANCELLED message is sent to observers.


Useful stuff
------------

* To find the message at the top of a thread's work queue from the thread work
  function, in gdb:

print *(IrisMessage *)(((IrisWorkerData *)((IrisThreadWork *)queue->priv->q->queue->head->data)->data)->message)
